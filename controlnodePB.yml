---
  - hosts: controlnode
    remote_user: ansible
    vars:
      internal_if: enp0s8
      public_if: enp0s3
      internal_ip: 192.168.6.5
      admin_pass: iq156sr7
      
    - tasks
## Configure firewall
  # ensure that the firewalld is started and enabled
      - name: enable and start firewalld
        systemd:
          name: firewalld
          enabled: yes
          state: started
          
  # set internal zone interface
      - name: set internal zone interface
        firewalld:
          interface: "{{ internal_if }}"
          permanent: true
          state: enabled
          
## Install NTP Server to adjust the date
  # Install NTPd and Configure NTP server for time adjustment      
      - name: install ntp
        yum:
          name: ntp
          state: latest
      
      - name: configure ntp
        lineinfile:
          dest: /etc/ntp.conf
          regex: '^#restict 192.168.1.0'
          line: 'restrict 192.168.6.0 mask 255.255.255.0 nomodify notrap'
      - name: Start and enable ntpd
        systemd:
          name: ntpd
          enabled: yes
          stated: started
          
  # Add the ntp service to the firewall rules
      - name: allowing the ntp service through the firewall
        firewalld:
          service: ntp
          permanent: true
          state: enabled
          zone: public
          
## Add the repository of Openstack Pike and Epel
  # install the centos7 openstack pike release
      - name: add the openstack pike repo
        yum:
          name: centos-release-openstack-pike
          state: present
          
      - name: add the epel repo
        yum:
          name: epel-release
          state: present
          
## Install and configure MariaDB Server
  # install mariadb form openstack pike
      - name: install mariadb form openstack pike
        yum:
          name: mariadb
          enablerepo: centos-openstack-pike
          state: present
  
  # configure mariadb /etc/my.conf file
      - name: add character-set-server
        lineinfile:
          dest: /etc/my.cnf
          insertafter: '^\[mysqld\]'
          line: character-set-server=utf8
  
  # start and enable mariadb
      - name: start and enable mariadb
        systemd:
          name: mariadb
          enabled: yes
          state: started
          
  # initial settings for mariadb
  
    # set root password
    # remove anonymous users
    # disallow root login remotely
    # remove test database
    # reload privilege tables
    # connect to MariaDB with root
  
  # add the mysql service to the firewall
      - name: add the mysql service to the firewall
        firewalld:
          service: mysql
          permanent: true
          state: enabled
          zone: internal
          
## install and configure rabbitmq, memcached
  # install rabbitmq and memcached
      - name: install rebbitmq and memcached
        yum:
          name: "{{ item }}"
          enablerepo: epel
          state: present
        with_items:
          - rabbitmq-server
          - memcached
          
  # start and enable rabbitmq memcached
      - name: enable rabbitmq and memcached
        systemd:
          name: "{{ item }}"
          enabled: yes
          state: started
        with_items:
          - rabbitmq-server
          - memcached
  
  # add openstack user (set any password you like for "password"
    # rabbitmqctl add_user openstack password
  
    # rabbitmqctl set_permissions openstack * * *
    
  # add ports 11211/tcp & 5672/tcp to firewalld
      - name: add ports to firewall
        firewalld:
          port: "{{ item }}"
          permanent: true
          state: enabled
          zone:internal
        with_items:
          - 11211/tcp
          - 5672/tcp
        
## Install and Configure Openstack Identity Service (Keystone)
  # add a user and database on mariadb for Keystone
    # mysql -u root -p
    # create database keystone;
    # grant all privileges on keystone.* to keystone@'localhost' identified by 'password';
    # grant all privileges on keyston.* to keystone@'%' identified by 'password';
    # flush privileges
    
  # install keystone
      - name: install keystone
        yum:
          name: "{{ item.name }}"
          enablerepo: "{{ item.repo }}"
          state: present
        with_items:
          - { name: openstack-keystone, repo: centos-openstack-ocata }
          - { name: openstack-utils, repo: centos-openstack-ocata }
          - { name: python-openstackclient, repo: centos-openstack-ocata }
          - { name: httpd, repo: epel }
          - { name: mod_wsgi, repo: epel }
  
  # Configure Keystone file /etc/keystone/keystone.conf
    # line 714: add (MariaDB connection info)   
      - name: line 714: add (MariaDB connection info)
        lineinfile:
          dest: /etc/keystone/keystone.conf
          insertafter: '^#connection = <None>'
          line: 'connection = mysql+pymysql://keystone:password@{{ internal_ip }}/keystone'
          state: present
    
    # line 1494: specify Memcache server
      - name: line 1494: specify memcache server
        lineinfile:
          dest: /etc/keystone/keystone.conf
          insertafter: '^\[memcache\]'
          line: 'servers = {{ internal_ip }}:11211'
          state: present
          
    # line 2791 add provider and driver
      - name: line 2791 add provider and driver
        blockinfile:
          dest: /etc/keystone/keystone.conf
          insertafter: '^\[token\]'
          block: |
            provider = fernet
            driver = memcache
            
    # change the shell of the keystone user | pass keystone-manager and db_sync into the shell
      - name: change the shell of the keystone user
        command: su -s /bin/bash keystone -c "keystone-manage db_sync"
        
    # initialize keys
      - name: initialize keys fernet_setup
        command: keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone
        
      - name: initialize keys credential_setup
        command: keystone-manage credential_setup --keystone-user keystone --keystone-group keystone
      
    # define own (controller host) host
      - name: export host controller
        command: export controller={{ internal_ip }}
        
    # bootstrap keystone (replace any password you like for "adminpassword" section)
      - name: 
        command: keystone-manage bootstrap arg1 arg2 arg3 arg4 arg5
        args:
          --bootstrap-password {{ admin_pass }}
          --bootstrap-admin-url http://$controller:35357/v3/
          --bootstrap-internal-url http://$controller:35357/v3/
          --bootstrap-public-url http://$controller:5000/v3/
          --bootstrap-region-id RegionOne
  
  # change boolean settings
      - name: enalbe httpd boolean setting
        seboolean:
          name: "{{ item }}"
          state: yes
          persistent: yes
        with_items:
          - httpd_use_openstack
          - httpd_can_network_connect
          - httpd_can_network_connect_db
          
  # Enableconfig for Keystone ans start Apache httpd
    # create a soft link between /usr/share/keystone/wsgi-keystone.conf /etc/httpd/conf.d
      - name: create a symlink keyston the httpd conf 
        file:
          src: /usr/share/keystone/wsgi-keystone.conf
          dest: /etc/httpd/conf.d
          state: link
    
    # start and enable httpd
      - name: start and enable httpd
        systemd:
          name: httpd
          enabled: yes
          state: started
          
  # Firewall allow ports 5000/tcp & 35357/tcp for public services
      - name: add firewall rule
        firewalld:
          port: "{{ item }}"
          permanent: true
          enable: yes
          zone: public
        with_items:
          - 5000/tcp
          - 35357/tcp
  
  # Firewall allow ports 5000/tcp & 35357/tcp for internal services
      - name: 
        firewaslld:
          port: "{{ item }}"
          permanent: true
          enable: yes
          zone: internal
        with_items:
          - 5000/tcp
          - 35357/tcp

## Add Projects in Keystone
  # Create and load environment variables 
      - name: create and edit ~/keystonerc file
        blockinfile:
          dest: /root/keystonerc
          create: yes
          block: |
            export OS_PROJECT_DOMAIN_NAME=default
            export OS_USER_DOMAIN_NAME=default
            export OS_PROJECT_NAME=admin
            export OS_USERNAME=admin
            export OS_PASSWORD={{ admin_pass }}
            export OS_AUTH_URL=http://{{ internal_ip }}:35357/v3
            export OS_IDENTITY_API_VERSION=3
            export OS_IMAGE_API_VERSION=2
            export PS1='[\u@\h \W(keystone)]\$'
  
    # Change ~/keystonerc permissions
      - name: Change ~/keystonerc permissions
        file:
          path: /root/keystonerc
          mode: 0600
  
    # Create source ~/keystonerc
      - name: create source ~/keystonerc
        command: source ~/keystonerc
      
      - name:
        command: echo "source /root/keystonerc " >> ~/.bash_profile
  
  # create service project
      - name: create service project
        command: openstack project create --domain default --description "Service Project" service
  
  # confirm settings
      - name: confirm settings
        command: openstack project list

## Install and Configure OpenStack Image Service (Glance).
  # Add users and others for Glance in Keystone
  
    # add glance user (set in service project)
      - name: add glance user
        command: openstack user create --domain default --project service --password servicepassword glance
        
    # add glance user in admin role
      - name: add glance user in admin role
        command: openstack role add --project service --user glance admin
        
    # add service entry for glance
      - name: add service entry for glance
        command: openstack service create --name glance --description "OpenStack Image service" image
    
    # define keystone host
      - name: define keystone host
        command: export controller={{ internal_ip }}
        
    # add endpoint for glance (public)
      - name: add endpoint for glance (public)
        command: openstack endpoint create --region RegionOne image public http://{{ public_ip }}:9292
        
    # add endpoint for glance (internal)
      - name: add endpoint for glance (internal)
        command: openstack endpoint create --region RegionOne image internal http://{{ internal_ip }}:9292
        
    # add endpoint for glance (admin)
      - name: add endpoint for glance
        command: openstack endpoint create --region RegionOne image admin http://{{ internal_ip }}:9292
        
  # Add a User and Database on MariaDB for Glance
    # create database glance
      - name: create database glance
        mysql_db:
          name: glance
          login_user: root
          login_password: {{ admin_pass }}
          state: present
          
    # grant all privileges on glance
      - name: grant all privileges on glance
        mysql_db:
          name: glance
          login_user: root
          login_password: {{ admin_pass }}
          priv: 'glance.*:ALL'
          state: present
          
    # grant all privileges on glance
    # flush privileges
    
  # Install Glance
    - name: install glance
      yum:
        name: openstack-glance
        enablerepo: centos-openstack-pike,epel
        state: present
  
  # Configure Glance
    # backup and configure the glance-api.conf
    - name: create and configure the glance-api.conf
      blockinfile:
        path: /etc/glance/glance-api.conf
        backup: yes
        block: |
          [DEFAULT]
          bind_host = 0.0.0.0
          
          [glance_store]
          store = file,http
          default_store = file
          filesystem_store_datadir = /var/lib/glance/images
          
          [database]
          connection = mysql+pymysql://glance:{{ admin_pass }}@{{ internal_ip }}/glance
          
          [keystone_authtoken]
          auth_url = http://{{ internal_ip }}:5000
          auth_url = http://{{ internal_ip }}:35357
          memcached_servers = {{ internal_ip }}:11211
          auth_type = password
          project_domain_name = default
          user_domain_name = default
          project_name = service
          username = glance
          password = servicepassword
          
          [paste_deploy]
          flavor = keystone
      
    # backup and configure the glance-registry.conf
      - name: backup and configure the glance-registry.conf
        blockinfile:
          path: /etc/glance/glance-registry.conf
          backup: yes
          block: |
            [DEFAULT]
            bind_host = 0.0.0.0
            
            [database]
            connection = mysql+pymysql://glance:{{ admin_pass }}@192.168.6.5/glance
            
            [keystone_authtoken]
            auth_url = http://{{ internal_ip }}:5000
            auth_url = http://{{ internal_ip }}:35357
            memcached_servers = {{ internal_ip }}:11211
            auth_type = password
            project_domain_name = default
            user_domain_name = default
            project_name = service
            username = glance
            password = servicepassword
            
            [paste_deploy]
            flavor = keystone
            
   # change glance boolean settings
      - name: change glance boolean settings
        seboolean:
          name: glance_api_can_network
          state: yes
          persistant: yes
          
   # allow ports for glance service
      - name: allow ports for glance service
        firewalld:
          zone: internal
          port: "{{ item }}"
          state: enabled
          permanent: true
        with_items:
          - 9191/tcp
          - 9292/tcp
          
## Add VM Images
  
  # Create Centos 7 image on Glance Host
    # install qemu-img, virt-install
      - name: install qemu-img virt-install
        yum:
          name: "{{ item }}"
          state: latest
        with_items:
          - qemu-img
          - virt-install
          - qemu-kvm 
   
    # start and enable libvirtd
      - name: start and enable libvirtd
        systemd:
          name: libvirtd
          enabled: yes
          state: started
          
    # create a directory for disk image
      - name: create a directory for disk images
        file:
          path: /var/kvm/images
          state: directory
          
    # create a disk image
      - name: create a disk image
        virt:
          name: centos7
        
    # install VM
     http://mirror.cs.vt.edu/pub/CentOS/7/os/x86_64/
     
  # After installation, change settings in virtual machine like follows and shutdown it.
    
    # delete or comment out the line [HWADDR] and [UUID] in [/etc/sysconfig/network-scripts/ifcfg-eth0]
      - name: comment out uuid and HWDDR
        replace:
          path: /etc/sysconfig/network-scripts/ifcfg-{{ internal_if }}
          regex: '^UUID'
          replace: '#UUID'
          backup: yes
          
    # set [dhcp] for [BOOTPROTO] in [/etc/sysconfig/network-scripts/ifcfg-eth0]
      - name: set BOOTPROTO as dhcp
        replace:
          path: /etc/sysconfig/network-scripts/ifcfg-{{ internal_if }}
          regex: '^BOOTPROTO=none'
          replace: 'BOOTPROTO=dhcp'
          
    # install [cloud-init] package and enable [cloud-init] service, and also add a user whose name is [centos]
      - name: install cloud-init
        yum:
          name: cloud-init
          state: latest
          
      - name: start and enable cloud-init
        systemd:
          name: cloud-init
          state: started
          enabled: yes
          
  # Add the virtual image to Glance
    # openstack image create
      - name: openstack image create
        command: openstack image create "CentOS7" --file /var/kvm/images/centos7.img --disk-format qcow2 --container-format bare --public 
## Configure Nova 
  # Add users and others for Nova in keystone
    # add nova user (set in service project)
      - name: add nova user
        command: openstack user create --domain default --project service --password servicepassword nova 
        
    # add nova user in admin role
      - name: add nova user in admin role
        command: openstack role add --project service --user nova admin
        
    # add placement user (set in service project)
      - name: add placement user
        command: openstack user create --domain default --project service --password servicepassword placement
        
    # add service entry for nova
      - name: add service entry for nova
        command: openstack service create --name nova --description "OpenStack Compute service" compute
        
    # add service entry for placement
      - name: add service entry for placement
        command: openstack service create --name placement --description "OpenStack Compute Placement service" placement
        
    # add endpoint for nova (public)
      - name: add endpoint for nova public
        command: openstack endpoint create --region RegionOne compute public http://{{ public_ip }}:8774/v2.1/%\(tenant_id\)s
        
    # add endpoint for nova (internal)
      - name: add endpoint for nova internal
        command: openstack endpoint create --region RegionOne compute internal http://{{ internal_ip }}:8774/v2.1/%\(tenant_id\)s
        
    # add endpoint for nova (admin)
      - name: add endpoint for nova admin
        command: openstack endpoint create --region RegionOne compute admin http://{{ internal_ip }}:8774/v2.1/%\(tenant_id\)s
        
    # add endpoint for placement (public)
      - name: add endpoint got placement public
        command: openstack endpoint create --region RegionOne placement public http://{{ public_ip }}:8778 
        
    # add endpoint for placement (internal)
      - name: add endpoint for placement internal
        command: openstack endpoint create --region RegionOne placement internal http://{{ internal_ip }}:8778
        
    # add endpoint for placement (admin)
      - name: add endpoint for placement admin
        command: openstack endpoint create --region RegionOne placement admin http://{{ internal_ip }}:8778
        
  # Add a user and database on MariaDB for Nova
    # create database nova
    # grant all privileges on nova.* to nova@'localhost' identified by 'password'; 
    # grant all privileges on nova.* to nova@'%' identified by 'password';
    # create database nova_api;
    # grant all privileges on nova_api.* to nova@'localhost' identified by 'password'; 
    # grant all privileges on nova_api.* to nova@'%' identified by 'password';
    # create database nova_placement; 
    # grant all privileges on nova_placement.* to nova@'localhost' identified by 'password';
    # grant all privileges on nova_placement.* to nova@'%' identified by 'password';
    # create database nova_cell0;
    # grant all privileges on nova_cell0.* to nova@'localhost' identified by 'password';
    # grant all privileges on nova_cell0.* to nova@'%' identified by 'password';
  
  # Install Nova services
      - name: install from pike & epel
        yum:
          name: openstack-nova
          enalberepo: centos-openstack-pike,epel
          state: present
  
  # backup and Configure Nova
      - name: backup and configure nova
        blockinfile:
          path: /etc/nova/nova.conf
          backup: yes
          block: |
            [DEFAULT]
            # define own IP
            my_ip = 192.168.6.5
            state_path = /var/lib/nova
            enable_apis = osapi_compute,metadata
            log_dir = /var/log/nova
            # RabbitMQ connection info
            transport_url = rabbit://openstack:password@192.168.6.5
            
            [api]
            auth_strategy = keystone
            
            # Glance connection info
            [glance]
            api_servers = http://192.168.6.5:9292
            
            [oslo_concurrency]
            lock_path = $state_path/tmp
            
            # MariaDB connection info
            [api_database]
            connection = mysql+pymysql://nova:password@192.168.6.5/nova_api
            
            [database]
            connection = mysql+pymysql://nova:password@192.168.6.5/nova
            
            # Keystone auth info
            [keystone_authtoken]
            auth_url = http://192.168.6.5:5000
            auth_url = http://192.168.6.5:35357
            memcached_servers = 192.168.6.5:11211
            auth_type = password
            project_domain_name = default
            user_domain_name = default
            project_name = service
            username = nova
            password = servicepassword
            
            [placement]
            auth_url = http://192.168.6.5:35357
            os_region_name = RegionOne
            auth_type = password
            project_domain_name = default
            user_domain_name = default
            project_name = service
            username = placement
            password = servicepassword
            
            [placement_database]
            connection = mysql+pymysql://nova:password@192.168.6.5/nova_placement
            
            [wsgi]
            api_paste_config = /etc/nova/api-paste.ini
            
  # change the permission of nova.conf
      - name: change the permission of nova.conf
        file:
          path: /etc/nova/nova.conf
          mode: 0640
          group: nova
          
 # Add directory to 00-nova-placement-api.conf
      - name: Add directory to 00-nova-placement-api.conf
        blockinfile:
          path: /etc/httpd/conf.d/00-nova-placement-api.conf
          backup: yes
          insertafter: '^#SSLCertificateKeyFile ...'
          insertbefore: '^</VirtualHost>'
          block: |
            <Directory /usr/bin>
             Require all granted 
            </Directory>
            
 # Add SELinux port policy
    - name:
    
 # create the nova-api_pol.te
    - name: create the nova-api_pol.te
      blockinfile:
      create: yes
      block: |
        module nova-api_pol 1.0;
        
        require {
             type nova_t;
             type httpd_config_t;
             type httpd_t;
             type nova_log_t;
             type sysctl_net_t;
             type netutils_exec_t;
             class file { read getattr create open execute };
             class dir { write search add_name };
             class capability { kill sys_ptrace };
             class capability2 block_suspend;
        }
        
        #============= httpd_t ==================
        allow httpd_t nova_log_t:dir { write add_name };
        allow httpd_t nova_log_t:file { create open };
        
        #============= nova_t ===================
        allow nova_t httpd_config_t:dir search;
        allow nova_t netutils_exec_t:file execute;
        allow nove_t self:capability kill;
        allow nova_t sysctl_net_t:dir search;
        allow nova_t sysctl_net_t:file { read getattr open };
        allow nova_t self:capability sys_ptrace;
        allow nova_t self:capability2 block_suspend;
        
 # check the syntax on the nova-api_pol.te
    - name: 
      command: checkmodule -m -M -o nova-api_pol.mod nova-api_pol.te
      
 # Semodule 
    - name:
      command: semodule_package --outfile nova-api_pol.pp --module nova-api_pol.mod
      
 # Semodule
    - name:
      command: semodule -i nova-api_pol.pp
 
# Add firewall ports for nova
    - name:
      firewalld:
        port: "{{ item }}"
        permanent: true
      with_items:
        - 6080/tcp
        - 6081/tcp
        - 6082/tcp
        - 8774/tcp
        - 8775/tcp
        - 8778/tcp
 
# Add Data into Database and start Nova services
    - name: 
      command: su -s /bin/bash nova -c "nova-manage api_db sync"
      
    - name:
      command: su -s /bin/bash nova -c "nova-manage cell_v2 map_cell0 arg1
      args:
        - --datavase_connection mysql+pymysql://nova:password@192.168.6.5/nova_cell0"
    
    - name:
      command: su -s /bin/bash nova -c "nova-manage cell_v2 create_cell arg1 arg2 agr3
      args:
        - --name cell1
        - --database_connection mysql+pymysql://nova:password@192.168.6.5/nova
        - --transport-url rabbit://openstack:password@192.168.6.5:5672"
        
  # restart httpd
    - name: restart httpd
      systemd:
        name: httpd
        state: restarted
        
  # change the owner of the nova-placement-api.log
    - name: change the owner of the nova-placement-api.log
      file:
        path: /var/log/nova/nova-placement-api.log
        owner: nova
        
  # Run  script
    - name:
      command: for service in api consoleauth conductor scheduler novncproxy; do arg1 arg2 done 
      args:
        - systemctl start openstack-nova-$service
        - systemctl enable openstack-nova-$service
        
  
...
